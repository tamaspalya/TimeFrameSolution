using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TimeFrameWebAPIClient;
using TimeFrameWebAPIClient.DTOs;

namespace TimeFrame.Tests.WebApiClient
{
    class WorkItemWebApiTests
    {

        ITimeFrameApiClient _webAPIClient;
        WorkItemDto _workItem;
        UserDto _testUser;
        int _projectId = 175;

        [SetUp]
        public async Task Setup()
        {
            _webAPIClient = new TimeFrameApiClient(Configuration.LOCAL_URI);
            _workItem = new WorkItemDto() { WorkItemName = "test work item", ProjectId = _projectId, Description = "", StartDate=DateTime.Now, EndDate=DateTime.Now};
            _testUser = new UserDto() { Id = 1144 };
            _workItem.Id = await _webAPIClient.CreateWorkItemAsync(_workItem);

            await AssignUserAsync();
        }

        [TearDown]
        public async Task CleanUp()
        {
            await UnassignUserAsync();
            await _webAPIClient.DeleteWorkItemAsync(_workItem.Id);
        }

        [Test]
        public void CreateWorkItem()
        {
            //arrange - done in setup
            //act - done in setup
            //assert
            Assert.IsTrue(_workItem.Id > 0, "No autogenerated id, work item was not created.");
        }

        [Test]
        public async Task GetWorkItemByIdAsync()
        {
            //arrange
            //act
            WorkItemDto workItem = await _webAPIClient.GetWorkItemByIdAsync(_workItem.Id);
            //assert
            Assert.NotNull(workItem, "The returned work item was null.");
        }

        [Test]
        public async Task GetAllWorkItemsAsync()
        {
            //arrange
            //act
            IEnumerable<WorkItemDto> workItems = await _webAPIClient.GetAllWorkItemsAsync();
            //assert
            Assert.NotNull(workItems, "Returned work item collection was null.");
        }

        [Test]
        public async Task UpdateWorkItemAsync()
        {
            //arrange
            WorkItemDto workItem = new WorkItemDto() { Id = _workItem.Id, ProjectId = _workItem.ProjectId, WorkItemName = "Updated name", Description = "", StartDate = DateTime.Now, EndDate = DateTime.Now};
            //act
            bool result = await _webAPIClient.UpdateWorkItemAsync(workItem);
            //assert
            Assert.IsTrue(result, "Updating a work item failed.");
        }

        /*
        [Test]
        public async Task AssignUserToWorkItemAsync()
        {
            //arrange
            //act
            bool result = await AssignUserAsync();
            //assert
            Assert.IsTrue(result, "Failed to assign user to the work item");
        }
        */

        /*
        [Test]
        public async Task UnassignUserFromWorkItemAsync()
        {
            //arrange
            await _webAPIClient.AssignUserToWorkItemAsync(_workItem.Id, _testUser);
            //act
            bool result = await _webAPIClient.UnassignUserFromWorkItemAsync(_workItem.Id, _testUser);
            //assert
            Assert.IsTrue(result, "Failed to unassign user from the work item");
        }
        */

        [Test]
        public async Task GetWorkItemsByUserIdAsync()
        {
            //arrange
            //assigning user in setup
            //act
            IEnumerable<WorkItemDto> workItems = await _webAPIClient.GetWorkItemsByUserIdAsync(_testUser.Id);
            //assert
            Assert.IsNotNull(workItems, "The returned collection of work items was null.");
            Assert.AreEqual(1, workItems.ToList().Count(), "The number of work items in the collection did not match the expected.");
        }

        [Test]
        public async Task GetWorkItemsByProjectIdAsync()
        {
            //arrange

            //act
            IEnumerable<WorkItemDto> workItems = await _webAPIClient.GetWorkItemsByProjectAsync(_projectId);
            //assert
            Assert.IsNotNull(workItems, "The returned collection of work items was null.");
            Assert.AreEqual(1, workItems.ToList().Count(), "The number of work items in the collection did not match the expected.");
        }

        [Test]
        public async Task GetUsersByWorkItemAsync()
        {
            //arrange
            int expectedNumberOfUsers = 1;
            //act
            IEnumerable<UserDto> users = await _webAPIClient.GetUsersByWorkItemAsync(_workItem.Id);
            //assert
            Assert.IsNotNull(users, "Returned collection was null.");
            Assert.AreEqual(expectedNumberOfUsers, users.ToList().Count(), "The number of returned users did not match the expected.");
        }

        #region Helper methods
        public async Task<bool> AssignUserAsync()
        {
            return await _webAPIClient.AssignUserToWorkItemAsync(_workItem.Id, _testUser);
        }

        public async Task<bool> UnassignUserAsync()
        {
            return await _webAPIClient.UnassignUserFromWorkItemAsync(_workItem.Id, _testUser);
        }
        #endregion
    }
}
